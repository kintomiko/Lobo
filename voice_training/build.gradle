task wrapper(type: Wrapper) {
    gradleVersion = '4.6' //version required
}

ext{
    if (project.hasProperty("sample_folder")){
        profileDir = "$sample_folder"
    } else {
        profileDir = "linyuan"
    }
    println "set working dir to $profileDir"
}

task mkTmpDir(type: Exec) {
    delete "tmp"
    commandLine "mkdir", "tmp"
}

task copySeeds(dependsOn: mkTmpDir){
    doLast{
        copy {
            from "seeds"
            into 'tmp'
        }
        copy {
            from "$profileDir"
            into 'tmp'
        }
    }
}

task checkMaterials(dependsOn: copySeeds){
    doFirst {
        println 'check training materials'
    }
}

task makeMfcFile(type: Exec, dependsOn: checkMaterials) {
    doFirst {
        println 'Make mfc file'
    }
    workingDir 'tmp'

    commandLine "sphinx_fe", 
        "-argfile", "cn-zh-ptm/feat.params",
        "-samprate", "16000",
        "-c", "arctic.fileids",
        "-di", ".", "-do", ".", "-ei", "wav",
        "-eo", "mfc",
        "-mswav", "yes"
}

task accuObserCounts(type: Exec, dependsOn: makeMfcFile) {
    doFirst {
        println 'Accumulating observation counts'
    }
    workingDir 'tmp'

    commandLine "/usr/local/libexec/sphinxtrain/bw",
        "-hmmdir", "cn-zh-ptm",
        "-moddeffn", "cn-zh-ptm/mdef",
        "-ts2cbfn", ".ptm.",
        "-feat", "s2_4x",
        "-cmn", "current",
        "-agc", "none",
        "-dictfn", "zh_broadcastnews_utf8.dic",
        "-ctlfn", "arctic.fileids",
        "-lsnfn", "arctic.transcription",
        "-accumdir", "."
}

task createMLLR(type: Exec, dependsOn: accuObserCounts) {
    doFirst {
        println 'Creating a transformation with MLLR'
    }
    workingDir 'tmp'

    commandLine "/usr/local/libexec/sphinxtrain/mllr_solve",
        "-meanfn", "cn-zh-ptm/means",
        "-varfn", "cn-zh-ptm/variances",
        "-outmllrfn", "mllr_matrix",
        "-accumdir", "."

}

task copyModel(type: Exec, dependsOn: createMLLR){
    doFirst {
        println 'Updating the acoustic model files with MAP'
    }

    workingDir 'tmp'

    delete "tmp/cn-zh-ptm-adapt"
    commandLine "mkdir", "cn-zh-ptm-adapt"

    doLast{
        copy {
            from "tmp/cn-zh-ptm"
            into 'tmp/cn-zh-ptm-adapt'
        }
    }
}

task updateModelMAP(type: Exec, dependsOn: copyModel) {

    workingDir 'tmp'

    commandLine "/usr/local/libexec/sphinxtrain/map_adapt",
        "-moddeffn", "cn-zh-ptm/mdef",
        "-ts2cbfn", ".ptm.",
        "-meanfn", "cn-zh-ptm/means",
        "-varfn", "cn-zh-ptm/variances",
        "-mixwfn", "cn-zh-ptm/mixture_weights",
        "-tmatfn", "cn-zh-ptm/transition_matrices",
        "-accumdir", ".",
        "-mapmeanfn", "cn-zh-ptm-adapt/means",
        "-mapvarfn", "cn-zh-ptm-adapt/variances",
        "-mapmixwfn", "cn-zh-ptm-adapt/mixture_weights",
        "-maptmatfn", "cn-zh-ptm-adapt/transition_matrices"

    commandLine "/usr/local/libexec/sphinxtrain/mk_s2sendump",
        "-pocketsphinx", "yes",
        "-moddeffn", "cn-zh-ptm-adapt/mdef",
        "-mixwfn", "cn-zh-ptm-adapt/mixture_weights",
        "-sendumpfn", "cn-zh-ptm-adapt/sendump"
}

task buildAdaptModel(dependsOn: updateModelMAP){
    doFirst {
        println 'start building model with $profileDir'
    }
}

task updateAppModel(dependsOn: buildAdaptModel){
    doFirst {
        println 'Updating App Adapted model'
    }

    doLast{
        copy {
            from "tmp/cn-zh-ptm-adapt"
            into '../models/src/main/assets/sync/cn-zh-ptm'
        }

        copy {
            from "tmp/mllr_matrix"
            into '../models/src/main/assets/sync'
        }
    }
}